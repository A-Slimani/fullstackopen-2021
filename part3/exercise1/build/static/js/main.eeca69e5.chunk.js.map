{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","Notification","message","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,mBAAqB,iBAEpD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCXrCK,EAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,MAIV,UACE,uBACA,8EA+FSC,EA1FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,8BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBvB,MAAK,SAAAC,GACxBc,EAASd,EAASC,WAEnB,IAEH,IAyCMsB,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAK/B,UAAU,QAAf,SAAwB+B,KAG3BC,EAAcR,EAAUJ,EAAQA,EAAMa,QAAO,SAAArC,GAAI,OAAuB,IAAnBA,EAAKG,aAEhE,OACE,gCACE,uCACA,cAAC+B,EAAD,CAAcC,QAASL,IACvB,8BACE,yBAAQxB,QAAS,kBAAMuB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAAAtC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA5CD,SAAAc,GAEzB,IAAMf,EAAOwB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAEhC0B,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD8B,EACUlB,EAAI0B,GACX/B,MAAK,SAAAgC,GACJjB,EAASD,EAAMc,KAAI,SAAAtC,GAAI,OAAKA,EAAKe,KAAOA,EAAKf,EAAO0C,EAAa9B,YAElE+B,OAAM,SAAAC,GACLb,EAAgB,SAAD,OAAU/B,EAAKK,QAAf,0CACfwC,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMa,QAAO,SAAAG,GAAC,OAAIA,EAAEzB,KAAOA,SA4BR+B,CAAmB9C,EAAKe,MAF3Cf,EAAKe,SAMhB,uBAAMgC,SArEM,SAAAC,GACdA,EAAEC,iBAEF,IAAMC,EAAa,CACjB7C,QAASqB,EACTyB,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAI7BtB,EAAmBiB,GAAYxC,MAAK,SAAAC,GAClCc,EAASD,EAAMgC,OAAO7C,EAASC,OAC/Be,EAAW,QAyDX,UACE,uBAAO8B,MAAO/B,EAASgC,SAtDJ,SAAAV,GACvBW,QAAQC,IAAIZ,EAAEa,OAAOJ,OACrB9B,EAAWqB,EAAEa,OAAOJ,UAqDhB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC7FNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.eeca69e5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make unimportant\" : \"make important\";\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: '16'\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"some error has happened...\");\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data);\n    });\n  }, []);\n\n  const addNote = e => {\n    e.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then(response => {\n      setNotes(notes.concat(response.data));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = e => {\n    console.log(e.target.value);\n    setNewNote(e.target.value);\n  };\n\n  const toggleImportanceOf = id => {\n    // find the note we want to modify and assign it to the note variable\n    const note = notes.find(n => n.id === id);\n    // creating the new object, copies all the values using the spread operator\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote.data)));\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from the server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null;\n    }\n\n    return <div className=\"error\">{message}</div>;\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport axios from \"axios\";\nimport './index.css'\n\n// const promise = axios.get(\"http://localhost:3001/notes\");\n// console.log(promise);\n\n// const promise2 = axios.get(\"http://localhost:3001/foobar\");\n// console.log(promise2);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}